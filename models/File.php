<?php
/**
 * Created by PhpStorm.
 * User: developer
 * Date: 11.03.2017
 * Time: 23:46
 */

namespace seiweb\files\models;

use seiweb\ext\DateMysqlBehavior;
use seiweb\files\ModuleTrait;
use seiweb\sortable\behaviors\SortableGridBehavior;
use yii\base\Exception;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\helpers\BaseFileHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "{{%file}}".
 *
 * @property integer $id
 * @property integer $id_object
 * @property string  $model_key
 * @property integer $group_key
 * @property string  $mime
 * @property string  $file_name
 * @property string  $uf_file_name
 * @property integer $size
 * @property integer $sort
 * @property string  $ext
 * @property string  $created_at
 * @property string  $updated_at
 */
class File extends \yii\db\ActiveRecord
{
    use ModuleTrait;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%file}}';
    }

    public function behaviors()
    {
        return [

            [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
                'value' => new Expression('NOW()'),
            ],

            'sort' => [
                'class' => SortableGridBehavior::className(),
                'sortableAttribute' => 'sort',
                'scopeAttribute' => ['id_object', 'model_key', 'group_key']
            ],
        ];
    }

    public function scenarios()
    {
        return parent::scenarios();
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id_object', 'mime', 'file_name', 'uf_file_name', 'size', 'ext'], 'required'],
            [['id_object', 'group_key', 'size', 'sort'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            //[['created_at'], 'date','format'=>'php:d.m.Y H'],
            [['model_key', 'mime', 'file_name', 'uf_file_name'], 'string', 'max' => 255],
            [['ext'], 'string', 'max' => 6],
            //[['file'], 'file','maxSize'=>100]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'id_object' => 'Id Object', //primaryKey модели, к которой привязываются файлы
            'model_key' => 'Model Key', //текстовый идентификатор модели (имя класса или название таблицы)
            'group_key' => 'Group Key', //кастомная подгруппа в пределах экземпляра модели (например доступ к файлам Инструкция, Сертификат качества можно будет получить непосредственно)
            'mime' => 'Mime',
            'file_name' => 'File Name', //Имя файла в фс сервера
            'uf_file_name' => 'Uf File Name', //Юзер-френдли имя файла
            'size' => 'Size',
            'sort' => 'Sort',
            'ext' => 'Ext',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public function processUpload($file)
    {
        if($file == null)
            throw new Exception('$file is wrong');
        if ($file) {
            \Yii::trace('file validate ok', __METHOD__);
            $this->file_name = substr(md5(uniqid($file->baseName)), 5, 10) . '.' . $file->extension;
            $this->uf_file_name = $file->baseName;
            $this->ext = $file->extension;
            $this->size = $file->size;
            $this->mime = $file->type;

            /**
             * генерим директории для хранения файлов. Нужно чтобы файлы в одной секции хранились в одной папке, но так же необходимо учитывать model_key
             * 1 уровень - id из tbl_file_model_key
             * следующие 4 уровня уровни - по два символа из hex-представления id_object
             *
             * 1/ff/ff/ff/ff/file_01
             * 1/ff/ff/ff/ff/file_02
             * ......
             */

            $fileDir =$this->getModule()->getStorePath().$this->getSubdirectory();

            BaseFileHelper::createDirectory($fileDir, 0775, true);

            $file->saveAs($fileDir . $this->file_name);
            return $this->save();
        }
        return false;
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function delete()
    {
        $res = parent::delete();
        if($res)
        {
            unlink($this->getModule()->getStorePath().$this->getSubdirectory() . $this->file_name);
        }
        return $res;
    }

    public function getSubdirectory($glue = DIRECTORY_SEPARATOR){
        $subdirs = $this->model_key . sprintf('%08x', $this->id_object);
        $subdirs = substr(md5($subdirs), 5, 8);
        return $glue . implode($glue, str_split($subdirs, 2)) . $glue;
    }
}